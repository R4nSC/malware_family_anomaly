import torch
import torch.nn as nn
from torchvision import models

from preprocessing import data_preprocessing
from embedding_model import embedding_model
from test import classification_test
from visualization import train_visualization
from anomaly_model import anomaly_detection_model
from config import *

if __name__ == '__main__':
    # GPUを学習に利用可能かどうか
    if USE_GPU:
        print('Use GPU')
    else:
        print('Do not use GPU')

    data_loaders, datasets_size, class_names = data_preprocessing()

    # model_ft, loss, acc = embedding_model(data_loaders, datasets_size)

    # AlexNetの学習済みモデルをロード
    model_ft = models.alexnet(pretrained=True)

    # AlexNetの最終層の次元数を変更
    alx_lt = list(model_ft.classifier)
    alx_lt[6] = nn.Linear(in_features=4096, out_features=20, bias=True)
    model_ft.classifier = nn.Sequential(alx_lt[0], alx_lt[1], alx_lt[2], alx_lt[3], alx_lt[4], alx_lt[5], alx_lt[6])

    classification_test(model_ft, data_loaders, datasets_size)

    anomaly_detection_model(model_ft, data_loaders)

    # train_visualization(loss, acc, EMBEDDING_EPOCH)
