import torch.nn as nn
from torchsummary import summary
from sklearn.svm import OneClassSVM
from sklearn.neighbors import LocalOutlierFactor

from preprocessing import data_preprocessing
from embedding_train import embedding_model
from test import *
from anomaly_train import anomaly_detection_train, anomaly_model_parameter_search
from config import *
from models import Alexnet, Efficientnet, ArcFace
from parse_args import parse_args

if __name__ == '__main__':
    args = parse_args()

    # 学習にGPUを利用するかCPUを利用するか
    if args.debug:
        print('Device to use: {}'.format(DEVICE))
        print()

    # ファインチューニングに利用するモデルを読み込む
    if args.network == 'efficientnet':
        features_model = Efficientnet(args)
    else:
        features_model = Alexnet(args)

    if args.metric == 'arcface':
        metric_model = ArcFace(args.num_features, NUM_CLASS, s=30, m=0.5)
    else:
        metric_model = nn.Linear(args.num_features, NUM_CLASS, bias=True)

    if args.debug and args.metric == 'softmax':
        summary(features_model.network, (3, 224, 224))
        print()

    data_loaders, datasets_size, class_names = data_preprocessing(args)

    embedding_model(args, features_model, metric_model, data_loaders, datasets_size)

    classification_test(args, features_model, metric_model, data_loaders, datasets_size)

    best_params = anomaly_model_parameter_search(args, features_model, data_loaders)

    if args.anomaly == 'lof':
        anomaly_model = LocalOutlierFactor(n_neighbors=best_params['LoF_n_neighbors'], novelty=True)
    else:
        anomaly_model = OneClassSVM(nu=best_params['OCSVM_nu'], kernel="rbf", gamma=best_params['OCSVM_gamma'])

    anomaly_detection_train(args, anomaly_model, features_model, data_loaders)

    anomaly_detection_test(args, features_model, anomaly_model, data_loaders, datasets_size)
