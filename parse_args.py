import argparse
from config import *


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('-n', '--network', default='alexnet',
                        choices=['alexnet', 'efficientnet', 'pca'],
                        help='model network architecture (default: alexnet)')
    parser.add_argument('-m', '--metric', default='softmax',
                        choices=['arcface', 'softmax'],
                        help='loss architecture (default: arcface)')
    parser.add_argument('-a', '--anomaly', default='ocsvm',
                        choices=['ocsvm', 'lof'])
    parser.add_argument('-f', '--num-features', default=512, type=int,
                        help='dimention of embedded features (default: 512)')
    parser.add_argument('-b', '--batch-size', default=100, type=int,
                        help='mini-batch size (default: 100)')
    parser.add_argument('-e', '--epochs', default=10, type=int,
                        help='number of epochs (default: 10)')
    parser.add_argument('-p', '--parameter', default=0, type=int,
                        help='number of trials for parameter search of anomaly detection model (default: 0)')
    parser.add_argument('--gui', action='store_true',
                        help='Flag for GUI output (default: False)')
    parser.add_argument('--debug', action='store_true',
                        help='Flag for debugging output (default: False)')
    parser.add_argument('--csv', action='store_true',
                        help='Flag whether or not to output the results to a csv file (default: False)')
    parser.add_argument('--model-use', action='store_true',
                        help='Flag for using saving model parameters (default: False')
    parser.add_argument('--model-save', action='store_true',
                        help='Flag for saving embedding model parameters (default: False')

    '''
    parser.add_argument('--lr', '--learning-rate', default=1e-2, type=float)
    parser.add_argument('--min-lr', default=1e-3, type=float)
    parser.add_argument('--momentum', default=0.5, type=float)
    parser.add_argument('--weight-decay', default=1e-4, type=float)
    parser.add_argument('--nesterov', default=False, type=str2bool)
    parser.add_argument('--cpu', default=False, type=str2bool)
    '''

    args = parser.parse_args()

    if args.debug:
        print('=' * 100)
        print('Anomaly detection of unknown malware families')
        print('network: {}, metric: {}, anomaly: {}'.format(args.network, args.metric, args.anomaly))
        print('num-features: {}, batch-size: {}, epochs: {}, parameter-search-trials: {}'.format(
            args.num_features, args.batch_size, args.epochs, args.parameter))
        print('Device to use: {}'.format(DEVICE))
        print('=' * 100)
        print()

    return args
