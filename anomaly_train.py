import time
import numpy as np
import optuna
from sklearn.svm import OneClassSVM
from sklearn.neighbors import LocalOutlierFactor
from sklearn.metrics import accuracy_score


# One-Class SVMでのマルウェアファミリ異常検知
def anomaly_detection_train(args, model, features_model, data_loaders):
    since = time.time()

    train_features = features_model.extract_features(data_loaders['train'])
    val_features = features_model.extract_features(data_loaders['val'])
    unknown_features = features_model.extract_features(data_loaders['unknown'])

    features = {"train": train_features, "val": val_features, "unknown": unknown_features}

    study = optuna.create_study(direction="maximize")
    study.optimize(anomaly_model_parameter_search(features), n_trials=30)

    print(study.best_value)
    print(study.best_params)

    if args.debug:
        print(train_features)
        print(train_features.shape)
        print()

    print("anomaly model - Train phase")
    print('-' * 10)

    model.fit(train_features)

    time_elapsed = time.time() - since
    print('anomaly model - Training complete in {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))
    print()


def anomaly_model_parameter_search(features):

    def objective(trial):
        classifier_category = trial.suggest_categorical("classifier", ["OCSVM", "LocalOutlierFactor"])

        if classifier_category == "OCSVM":
            ocsvm_nu = trial.suggest_loguniform("OCSVM_nu", 0.01, 100)
            ocsvm_gamma = trial.suggest_loguniform("OCSVM_gamma", 0.01, 100)
            classifier = OneClassSVM(nu=ocsvm_nu, kernel="rbf", gamma=ocsvm_gamma)

        elif classifier_category == "LocalOutlierFactor":
            lof_n_estimators = trial.suggest_int("LoF_n_neighbors", 1, 100)
            # randomforest_max_depth = trial.suggest_int("RandomForest_max_depth", 1, 3)
            classifier = LocalOutlierFactor(n_neighbors=lof_n_estimators, novelty=True)

        classifier.fit(features['train'])
        pred_val = classifier.predict(features['val'])
        pred_unknown = classifier.predict(features['unknown'])
        pred = np.concatenate([pred_val, pred_unknown], 0)

        label_pos = np.ones(len(pred_val), int)
        label_neg = np.full(len(pred_unknown), -1)
        label = np.concatenate([label_pos, label_neg], 0)
        acc = accuracy_score(label, pred)

        return acc

    return objective


'''
def ocsvm_evaluate(nu, gamma):

    OC_SVM = OneClassSVM(nu=nu, kernel="rbf", gamma=gamma)
    OC_SVM.fit(train_features)

    pred = OC_SVM.predict(X_test)
    score = accuracy_score(y_test, pred)
    return score
'''