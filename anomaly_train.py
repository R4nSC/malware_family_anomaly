import time
import numpy as np
import optuna
from sklearn.svm import OneClassSVM
from sklearn.neighbors import LocalOutlierFactor
from sklearn.metrics import *

from test import anomaly_detection_test


# One-Class SVM, LoFでのマルウェアファミリ異常検知
def anomaly_model_train(args, model, features):
    since = time.time()

    print("anomaly model - Train phase")
    print('-' * 10)

    print(model.get_params())

    model.fit(features['train'])

    time_elapsed = time.time() - since
    print('anomaly model - Training complete in {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))
    print()

    return model


def extract_features(args, features_model, data_loaders):
    train_features, train_labels = features_model.extract_features(data_loaders, 'train')
    test_features, test_labels = features_model.extract_features(data_loaders, 'test')
    unknown_features, unknown_labels = features_model.extract_features(data_loaders, 'unknown')

    features = {"train": train_features, "test": test_features, "unknown": unknown_features}
    labels = {"known": test_labels, "unknown": unknown_labels}

    return features, labels


def anomaly_model_parameter_search(args, features, labels):
    sampler = optuna.samplers.TPESampler(seed=0)
    study = optuna.create_study(sampler=sampler, direction="maximize")
    study.optimize(objective_variable(args, features, labels), n_trials=args.parameter)

    print(study.best_value)
    print(study.best_params)

    return study.best_params


def objective_variable(args, features, labels):

    def objective(trial):
        # classifier_category = trial.suggest_categorical("classifier", ["OCSVM", "LocalOutlierFactor"])

        if args.anomaly == "ocsvm":
            ocsvm_nu = trial.suggest_loguniform("OCSVM_nu", 0.001, 0.2)
            ocsvm_gamma = trial.suggest_loguniform("OCSVM_gamma", 0.00001, 0.001)
            classifier = OneClassSVM(nu=ocsvm_nu, kernel="rbf", gamma=ocsvm_gamma)

        elif args.anomaly == "lof":
            lof_n_estimators = trial.suggest_int("LOF_n_neighbors", 1, 100)
            lof_contamination = trial.suggest_loguniform("LOF_contamination", 0.0001, 0.1)
            if args.metric == "arcface":
                classifier = LocalOutlierFactor(n_neighbors=lof_n_estimators, novelty=True,
                                                metric='cosine', contamination=lof_contamination)
            else:
                classifier = LocalOutlierFactor(n_neighbors=lof_n_estimators, novelty=True,
                                                contamination=lof_contamination)

        classifier.fit(features['train'])
        pred_test = classifier.predict(features['test'])
        pred_unknown = classifier.predict(features['unknown'])
        pred = np.concatenate([pred_test, pred_unknown], 0)

        label = np.concatenate([labels['known'], labels['unknown']], 0)
        f1 = f1_score(label, pred)

        return f1

    return objective


def anomaly_train(args, features_model, data_loaders):
    features, anomaly_labels = extract_features(args, features_model, data_loaders)

    if args.parameter != 0:
        best_params = anomaly_model_parameter_search(args, features, anomaly_labels)
        if args.anomaly == 'lof':
            if args.metric == 'arcface':
                anomaly_model = LocalOutlierFactor(n_neighbors=best_params['LOF_n_neighbors'], novelty=True,
                                                   metric='cosine', contamination=best_params['LOF_contamination'])
            else:
                anomaly_model = LocalOutlierFactor(n_neighbors=best_params['LOF_n_neighbors'], novelty=True,
                                                   contamination=best_params['LOF_contamination'])
        else:
            anomaly_model = OneClassSVM(nu=best_params['OCSVM_nu'], kernel="rbf", gamma=best_params['OCSVM_gamma'])
    else:
        if args.anomaly == 'lof':
            if args.metric == 'arcface':
                anomaly_model = LocalOutlierFactor(n_neighbors=20, novelty=True, metric='cosine')
            else:
                anomaly_model = LocalOutlierFactor(n_neighbors=20, novelty=True)
        else:
            anomaly_model = OneClassSVM(nu=0.2, kernel="rbf", gamma=0.00025)

    anomaly_model = anomaly_model_train(args, anomaly_model, features)

    result_list = anomaly_detection_test(args, anomaly_model, features, anomaly_labels)

    params = anomaly_model.get_params()
    if args.anomaly == 'lof':
        result_list.append(params['n_neighbors'])
        result_list.append(params['contamination'])
    else:
        result_list.append(params['nu'])
        result_list.append(params['gamma'])

    if args.network == 'pca':
        result_list.append(np.sum(features_model.model.explained_variance_ratio_))

    print(result_list)
    print()

    return anomaly_model, result_list
