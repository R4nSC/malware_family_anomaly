from sklearn.svm import OneClassSVM
import torch.nn as nn
from torch.autograd import Variable

from config import *


def anomaly_detection_model(features_model, data_loaders, datasets_size):
    # AlexNetの最終層の次元数を変更
    alx_lt = list(features_model.classifier)
    features_model.classifier = nn.Sequential(alx_lt[0], alx_lt[1], alx_lt[2], alx_lt[3], alx_lt[4], alx_lt[5])

    OCSVM = OneClassSVM(nu=0.01, kernel="rbf", gamma=0.00025)

    print("OCSVM train phase")
    print('-' * 10)

    with torch.no_grad():
        features_train_list = []
        for data in data_loaders['train']:
            images, labels = data

            if USE_GPU:
                images = Variable(images.cuda())
                labels = Variable(labels.cuda())
            else:
                images, labels = Variable(images), Variable(labels)

            feature = features_model(images)
            feature = feature.cpu()
            features_train_list.append(feature)

        train_features = torch.cat(features_train_list, dim=0)
        print(train_features.size())

        OCSVM.fit(train_features)

    with torch.no_grad():
        features_test_list = []
        for data in data_loaders['test']:
            images, labels = data

            if USE_GPU:
                images = Variable(images.cuda())
                labels = Variable(labels.cuda())
            else:
                images, labels = Variable(images), Variable(labels)

            feature = features_model(images)
            feature = feature.cpu()
            features_test_list.append(feature)

        test_features = torch.cat(features_test_list, dim=0)
        print(test_features.size())

        pred_test = OCSVM.predict(test_features)

        total = pred_test.size(0)
        correct = (pred_test == 1).sum().item()

        print('Accuracy of anomaly detection on the {:d} known test images: {:.4f}'.format(datasets_size['test'],
                                                                                           correct / total))

        features_unknown_list = []
        for data in data_loaders['unknown']:
            images, labels = data

            if USE_GPU:
                images = Variable(images.cuda())
                labels = Variable(labels.cuda())
            else:
                images, labels = Variable(images), Variable(labels)

            feature = features_model(images)
            feature = feature.cpu()
            features_unknown_list.append(feature)

        unknown_features = torch.cat(features_unknown_list, dim=0)
        print(unknown_features.size())

        pred_unknown = OCSVM.predict(unknown_features)

        total = pred_unknown.size(0)
        correct = (pred_unknown == -1).sum().item()

        print('Accuracy of anomaly detection on the {:d} unknown test images: {:.4f}'.format(datasets_size['unknown'],
                                                                                             correct / total))
