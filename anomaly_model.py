from sklearn.svm import OneClassSVM
import torch.nn as nn
from torch.autograd import Variable

from config import *


def anomaly_detection_model(features_model, data_loaders):
    # AlexNetの最終層の次元数を変更
    alx_lt = list(features_model.classifier)
    features_model.classifier = nn.Sequential(alx_lt[0], alx_lt[1], alx_lt[2], alx_lt[3], alx_lt[4], alx_lt[5])

    OCSVM = OneClassSVM(nu=0.01, kernel="rbf", gamma=0.00025)

    if USE_GPU:
        OCSVM = OCSVM.cuda()

    print("OCSVM phase")
    with torch.no_grad():
        for data in data_loaders['train']:
            images, labels = data

            if USE_GPU:
                images = Variable(images.cuda())
                labels = Variable(labels.cuda())
            else:
                images, labels = Variable(images), Variable(labels)

            features_train = features_model(images)

            if USE_GPU:
                features_train = Variable(features_train.cuda())
            else:
                features_train = Variable(features_train)

            OCSVM.fit(features_train)

            # _, predicted = torch.max(outputs.data, 1)
            # total += labels.size(0)
            # correct += (predicted == labels).sum().item()

    with torch.no_grad():
        for data in data_loaders['test']:
            images, labels = data

            if USE_GPU:
                images = Variable(images.cuda())
                labels = Variable(labels.cuda())
            else:
                images, labels = Variable(images), Variable(labels)

            features_test = features_model(images)

            if USE_GPU:
                features_test = Variable(features_test.cuda())
            else:
                features_test = Variable(features_test)

            pred_test = OCSVM.predict(features_test)

            print(pred_test)
