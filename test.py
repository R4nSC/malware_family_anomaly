import torch
from torch.autograd import Variable

from config import *


# 分類タスクのテスト
def classification_test(model, data_loaders, datasets_size):
    correct = 0
    total = 0
    with torch.no_grad():
        for data in data_loaders['test']:
            images, labels = data

            if USE_GPU:
                images = Variable(images.cuda())
                labels = Variable(labels.cuda())
            else:
                images, labels = Variable(images), Variable(labels)

            outputs = model(images)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    print('Accuracy of the network on the {:d} test images: {:.4f}'.format(datasets_size['test'], correct / total))


# 異常検知タスクのテスト
def anomaly_detection_test(features_model, anomaly_model, data_loaders, datasets_size):
    with torch.no_grad():
        features_test_list = []
        for data in data_loaders['test']:
            images, labels = data

            if USE_GPU:
                images = Variable(images.cuda())
                labels = Variable(labels.cuda())
            else:
                images, labels = Variable(images), Variable(labels)

            feature = features_model(images)
            feature = feature.cpu()
            features_test_list.append(feature)

        test_features = torch.cat(features_test_list, dim=0)

        pred_test = anomaly_model.predict(test_features)

        total = test_features.size(0)
        correct = (pred_test == 1).sum().item()

        print('total = {:d}, correct = {:d}'.format(total, correct))
        print('Accuracy of anomaly detection on the {:d} known test images: {:.4f}'.format(datasets_size['test'],
                                                                                           correct / total))

        features_unknown_list = []
        for data in data_loaders['unknown']:
            images, labels = data

            if USE_GPU:
                images = Variable(images.cuda())
                labels = Variable(labels.cuda())
            else:
                images, labels = Variable(images), Variable(labels)

            feature = features_model(images)
            feature = feature.cpu()
            features_unknown_list.append(feature)

        unknown_features = torch.cat(features_unknown_list, dim=0)

        pred_unknown = anomaly_model.predict(unknown_features)

        total = unknown_features.size(0)
        correct = (pred_unknown == -1).sum().item()

        print('total = {:d}, correct = {:d}'.format(total, correct))
        print('Accuracy of anomaly detection on the {:d} unknown test images: {:.4f}'.format(datasets_size['unknown'],
                                                                                             correct / total))
