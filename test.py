import torch
from torch.autograd import Variable
from sklearn.metrics import confusion_matrix

from config import *
from visualization import multi_classification_result_visualization


# 分類タスクのテスト
def classification_test(model, data_loaders, datasets_size):
    correct = 0
    total = 0
    all_pred = torch.zeros(1)
    all_label = torch.zeros(1)
    with torch.no_grad():
        for data in data_loaders['test']:
            images, labels = data

            images = images.to(DEVICE)
            labels = labels.to(DEVICE)
            all_pred = all_pred.to(DEVICE)
            all_label = all_label.to(DEVICE)

            '''
            if USE_GPU:
                images = Variable(images.cuda())
                labels = Variable(labels.cuda())
                all_pred = Variable(all_pred.cuda())
                all_label = Variable(all_label.cuda())
            else:
                images, labels = Variable(images), Variable(labels)
                all_pred, all_label = Variable(all_pred), Variable(all_label)
            '''

            outputs = model(images)
            _, predicted = torch.max(outputs.data, 1)
            if total == 0:
                all_pred = predicted
                all_label = labels
            else:
                all_pred = torch.cat((all_pred, predicted), 0)
                all_label = torch.cat((all_label, labels), 0)

            total = all_label.size(0)

    # 分類精度の計算
    total = all_label.size(0)
    correct = (all_pred == all_label).sum().item()

    # 混同行列の可視化
    multi_classification_result_visualization(all_label, all_pred)

    # 分類精度の出力
    print('Accuracy of the network on the {:d} test images: {:.4f}'.format(datasets_size['test'], correct / total))


# 異常検知タスクのテスト
def anomaly_detection_test(features_model, anomaly_model, data_loaders, datasets_size):
    with torch.no_grad():
        features_test_list = []
        for data in data_loaders['test']:
            images, labels = data

            images = images.to(DEVICE)
            labels = labels.to(DEVICE)

            '''
            if USE_GPU:
                images = Variable(images.cuda())
                labels = Variable(labels.cuda())
            else:
                images, labels = Variable(images), Variable(labels)
            '''

            feature = features_model(images)
            feature = feature.cpu()
            features_test_list.append(feature)

        test_features = torch.cat(features_test_list, dim=0)

        pred_test = anomaly_model.predict(test_features)

        total = test_features.size(0)
        correct = (pred_test == 1).sum().item()
        incorrect = (pred_test == -1).sum().item()

        print('total = {:d}, correct = {:d}, incorrect = {:d}'.format(total, correct, incorrect))
        print('Accuracy of anomaly detection on the {:d} known test images: {:.4f}'.format(datasets_size['test'],
                                                                                           correct / total))

        features_unknown_list = []
        for data in data_loaders['unknown']:
            images, labels = data

            inputs = inputs.to(DEVICE)
            labels = labels.to(DEVICE)

            '''
            if USE_GPU:
                images = Variable(images.cuda())
                labels = Variable(labels.cuda())
            else:
                images, labels = Variable(images), Variable(labels)
            '''

            feature = features_model(images)
            feature = feature.cpu()
            features_unknown_list.append(feature)

        unknown_features = torch.cat(features_unknown_list, dim=0)

        pred_unknown = anomaly_model.predict(unknown_features)

        total = unknown_features.size(0)
        correct = (pred_unknown == -1).sum().item()
        incorrect = (pred_unknown == 1).sum().item()

        print('total = {:d}, correct = {:d}, incorrect = {:d}'.format(total, correct, incorrect))
        print('Accuracy of anomaly detection on the {:d} unknown test images: {:.4f}'.format(datasets_size['unknown'],
                                                                                             correct / total))
