from visualization import *
from config import *


# 分類タスクのテスト
def classification_test(args, f_model, data_loaders, datasets_size):
    total = 0
    flg = True
    all_pred = torch.zeros(1)
    all_label = torch.zeros(1)

    f_model.eval()
    with torch.no_grad():
        for data in data_loaders['test']:
            images, labels = data

            images = images.to(DEVICE)
            labels = labels.to(DEVICE)
            all_pred = all_pred.to(DEVICE)
            all_label = all_label.to(DEVICE)

            outputs = f_model(images, labels)

            if flg:
                print(outputs)
                print(labels)
                flg = False

            _, predicted = torch.max(outputs.data, 1)
            if total == 0:
                all_pred = predicted
                all_label = labels
            else:
                all_pred = torch.cat((all_pred, predicted), 0)
                all_label = torch.cat((all_label, labels), 0)

            total = all_label.size(0)

    # 分類精度の計算
    total = all_label.size(0)
    correct = (all_pred == all_label).sum().item()

    # 混同行列の可視化
    if args.gui:
        multi_classification_result_visualization(all_label, all_pred)

    # 分類精度の出力
    print('Accuracy of the network on the {:d} test images: {:.4f}'.format(datasets_size['test'], correct / total))
    print()

    return correct / total


def unknown_classification_test(args, f_model, data_loaders, datasets_size):
    f_model.eval()
    flg = True
    with torch.no_grad():
        for data in data_loaders['unknown']:
            images, labels = data

            images = images.to(DEVICE)
            labels = labels.to(DEVICE)

            outputs = f_model(images, labels)

            if flg:
                print(outputs)
                print(labels)
                flg = False


# 異常検知タスクのテスト
def anomaly_detection_test(args, anomaly_model, features, labels):
    # Embeddingデータセットをt-SNEを利用して可視化する
    if args.gui:
        embedding_tsne_visualization(features['test'], features['unknown'])

    # 既知の評価データセットを予測して検知精度を出力
    pred_test = anomaly_model.predict(features['test'])

    pos_total = features['test'].shape[0]
    pos_correct = (pred_test == labels['known']).sum().item()
    pos_incorrect = (pred_test != labels['known']).sum().item()

    print('total = {:d}, correct = {:d}, incorrect = {:d}'.format(pos_total, pos_correct, pos_incorrect))
    print('Accuracy of anomaly detection on the {:d} known test images: {:.4f}'.format(pos_total,
                                                                                       pos_correct / pos_total))
    print()

    # 未知の評価データセットを予測して検知精度を出力
    pred_unknown = anomaly_model.predict(features['unknown'])

    neg_total = features['unknown'].shape[0]
    neg_correct = (pred_unknown == labels['unknown']).sum().item()
    neg_incorrect = (pred_unknown != labels['unknown']).sum().item()

    print('total = {:d}, correct = {:d}, incorrect = {:d}'.format(neg_total, neg_correct, neg_incorrect))
    print('Accuracy of anomaly detection on the {:d} unknown test images: {:.4f}'.format(neg_total,
                                                                                         neg_correct / neg_total))
    print()

    p_total = 0
    n_total = 0
    p_correct = 0
    n_correct = 0
    for i in list(range(neg_total)):
        if labels['unknown'][i] == 1:
            p_total += 1
            if labels['unknown'][i] == pred_unknown[i]:
                p_correct += 1
        else:
            n_total += 1
            if labels['unknown'][i] == pred_unknown[i]:
                n_correct += 1

    print('total = {:d}, correct = {:d}, incorrect = {:d}'.format(p_total, p_correct, p_total - p_correct))
    print('Accuracy of anomaly detection on the {:d} subspecies in the unknown test images: {:.4f}'.format(
        p_total, p_correct / p_total))
    print()

    print('total = {:d}, correct = {:d}, incorrect = {:d}'.format(n_total, n_correct, n_total - n_correct))
    print('Accuracy of anomaly detection on the {:d} new species in the unknown test images: {:.4f}'.format(
        n_total, n_correct / n_total))
    print()

    # 二値分類の混同行列作成用の予測ラベルベクトルを作成
    pred = np.concatenate([pred_test, pred_unknown], 0)

    # 二値分類の混同行列作成用の正解ラベルベクトルを作成
    label = np.concatenate([labels['known'], labels['unknown']], 0)

    # 二値分類の混同行列を出力
    if args.gui:
        Binary_classification_result_visualization(pred, label)

    acc = accuracy_score(label, pred)
    rec = recall_score(label, pred)
    pre = precision_score(label, pred)
    f1 = f1_score(label, pred)

    print('Accuracy: {:.4f}, Recall: {:.4f}, Precision: {:.4f}, F-Value: {:.4f}'.format(acc, rec, pre, f1))

    #csvファイルに書き込む用のlistを生成
    result_list = [pos_correct / pos_total, p_correct / p_total, n_correct / n_total, acc, rec, pre, f1,
                   pos_correct, pos_incorrect, p_correct, p_total - p_correct, n_correct, n_total - n_correct]

    return result_list
