import torch.nn as nn
from efficientnet_pytorch import EfficientNet

from config import *


class Efficientnet:
    def __init__(self):
        # EfficientNetの学習済みモデルをロード
        self.network = EfficientNet.from_pretrained('efficientnet-b0', num_classes=20)
        self.network._fc = nn.Sequential(nn.Linear(self.network._fc.in_features, 512),
                                         nn.ReLU(),
                                         nn.Dropout(0.25),
                                         nn.Linear(512, 128),
                                         nn.ReLU(),
                                         nn.Dropout(0.50),
                                         nn.Linear(128, NUM_CLASS))

    # 学習した特徴量を抽出する
    def extract_features(self, data_loader):
        # EfficientNetの最終層を切り落とす
        model_lt = list(self.network._fc)
        self.network._fc = nn.Sequential(model_lt[0], model_lt[1], model_lt[2], model_lt[3], model_lt[4])

        self.network.eval()
        with torch.no_grad():
            features_list = []
            for data in data_loader:
                images, labels = data

                images = images.to(DEVICE)
                labels = labels.to(DEVICE)

                feature = self.network(images)
                # feature = feature.ravel()
                feature = feature.flatten(start_dim=1)

                feature = feature.cpu()
                features_list.append(feature)

            features = torch.cat(features_list, dim=0)

        return features
