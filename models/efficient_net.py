import torch.nn as nn
from efficientnet_pytorch import EfficientNet

from config import *


class Efficientnet:
    def __init__(self):
        # EfficientNetの学習済みモデルをロード
        self.network = EfficientNet.from_pretrained('efficientnet-b0', num_classes=20)
        self._avg_pooling = nn.AdaptiveAvgPool2d(1)

    # 学習した特徴量を抽出する
    def extract_features(self, data_loader):
        # EfficientNetの最終層を切り落とす
        self.network.eval()
        with torch.no_grad():
            features_list = []
            for data in data_loader:
                images, labels = data

                images = images.to(DEVICE)
                labels = labels.to(DEVICE)

                feature = self.network.extract_features(images)
                feature = self._avg_pooling(feature)
                # feature = feature.ravel()
                feature = feature.flatten(start_dim=1)

                feature = feature.cpu()
                features_list.append(feature)

            features = torch.cat(features_list, dim=0)

        return features
