import torch.nn as nn
from torchvision import models

from config import *


class Alexnet:
    def __init__(self):
        # AlexNetの学習済みモデルをロード
        self.network = models.alexnet(pretrained=True)

        # AlexNetの最終層の次元数を変更
        alx_lt = list(self.network.classifier)
        alx_lt[6] = nn.Linear(in_features=4096, out_features=20, bias=True)
        self.network.classifier = nn.Sequential(alx_lt[0], alx_lt[1])
        # self.network.classifier = nn.Sequential(alx_lt[0], alx_lt[1], alx_lt[2], alx_lt[3], alx_lt[4], alx_lt[5], alx_lt[6])


    # 学習した特徴量を抽出する
    def extract_features(self, data_loader):
        # AlexNetの最終層を切り落とす
        # alx_lt = list(self.network.classifier)
        # self.network.classifier = nn.Sequential(alx_lt[0], alx_lt[1], alx_lt[2], alx_lt[3], alx_lt[4], alx_lt[5])

        self.network.eval()
        with torch.no_grad():
            features_list = []
            for data in data_loader:
                images, labels = data

                images = images.to(DEVICE)
                labels = labels.to(DEVICE)

                feature = self.network(images)
                feature = feature.cpu()
                features_list.append(feature)

            features = torch.cat(features_list, dim=0)

        return features
