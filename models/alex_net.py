import torch.nn as nn
from torchvision import models

from config import *
from .metrics import ArcFace


class Alexnet(nn.Module):
    def __init__(self, args):
        super().__init__()

        # AlexNetの学習済みモデルをロード
        self.network = models.alexnet(pretrained=True)
        self.metric = args.metric

        if args.metric == 'arcface':
            # AlexNetのclassifierをarcfaceに変更する
            self.network.classifier = ArcFace(args.num_features, NUM_CLASS, s=30, m=0.5)
        else:
            # AlexNetの最終層の次元を変更する
            alx_lt = list(self.network.classifier)
            alx_lt[6] = nn.Linear(4096, NUM_CLASS, bias=True)
            self.network.classifier = nn.Sequential(alx_lt[0], alx_lt[1], alx_lt[2], alx_lt[3],
                                                    alx_lt[4], alx_lt[5], alx_lt[6])

    def forward(self, x, labels):
        x = self.network.features(x)
        x = self.network.avgpool(x)
        features = torch.flatten(x)
        if self.metric == 'softmax':
            outputs = self.network.classifier(features)
        else:
            outputs = self.network.classifier(features, labels)
        return outputs

    # 学習した特徴量を抽出する
    def extract_features(self, data_loader):
        self.network.eval()
        with torch.no_grad():
            features_list = []
            for data in data_loader:
                images, labels = data

                images = images.to(DEVICE)
                labels = labels.to(DEVICE)

                x = self.network.features(images)
                x = self.network.avgpool(x)
                feature = torch.flatten(x)

                feature = feature.cpu()
                features_list.append(feature)

            features = torch.cat(features_list, dim=0)

        return features
