import torch
import torch.nn as nn

from config import *


def extract_from_alex(model, data_loader):
    # AlexNetの最終層を切り落とす
    alx_lt = list(model.classifier)
    model.classifier = nn.Sequential(alx_lt[0], alx_lt[1], alx_lt[2], alx_lt[3], alx_lt[4], alx_lt[5])

    model.eval()
    with torch.no_grad():
        features_list = []
        for data in data_loader:
            images, labels = data

            images = images.to(DEVICE)
            labels = labels.to(DEVICE)

            feature = model(images)
            feature = feature.cpu()
            features_list.append(feature)

        features = torch.cat(features_list, dim=0)

    return features


def extract_from_efficient(model, data_loader):
    model.eval()
    with torch.no_grad():
        features_list = []
        for data in data_loader:
            images, labels = data

            images = images.to(DEVICE)
            labels = labels.to(DEVICE)

            feature = model.extract_features(images)

            feature = feature.cpu()
            features_list.append(feature)

        features = torch.cat(features_list, dim=0)

    return features
