import time
import copy
import torch.optim as optim
from torch.optim import lr_scheduler

from config import *


# モデルの学習
def train_model(model, data_loaders, datasets_size, criterion, optimizer, scheduler, num_epochs=25):
    # 学習開始時間の保持
    since = time.time()

    # 初期の事前学習時点でのパラメータを保存
    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    loss_dict = {"train": [],  "val": []}
    acc_dict = {"train": [],  "val": []}

    print("Embedding train phase")
    print('-' * 10)
    print()

    # 定めた回数分だけ学習を繰り返す
    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch+1, num_epochs))
        print('-' * 10)

        # 各エポックでTrainingとValidationを繰り返す
        for phase in ['train', 'val']:
            # 学習時と推論時で振る舞いの違うモジュールの振る舞いを変更する
            if phase == 'train':
                # optimizer.step()
                # scheduler.step()
                model.train()  # 学習モードに変更
            else:
                model.eval()  # 推論モードに変更

            running_loss = 0.0
            running_corrects = 0

            # 用意したデータセットで学習を繰り返す
            for data in data_loaders[phase]:

                # 入力データ(バッチサイズ分)
                inputs, labels = data

                inputs = inputs.to(DEVICE)
                labels = labels.to(DEVICE)

                # 勾配を０で初期化する
                optimizer.zero_grad()

                # forward
                outputs = model(inputs)
                _, preds = torch.max(outputs.data, 1)
                loss = criterion(outputs, labels)

                # 学習フェーズの時のみ，誤差逆伝播とパラメータ更新を行う
                if phase == 'train':
                    loss.backward()  # 誤差逆伝播にて勾配を求める
                    optimizer.step()  # optimizerでパラメータを更新

                # statistics
                running_loss += loss.data.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)
            if phase == 'train':
                scheduler.step()
            
            epoch_loss = running_loss / datasets_size[phase]
            epoch_acc = running_corrects / datasets_size[phase]

            loss_dict[phase].append(epoch_loss)
            acc_dict[phase].append(epoch_acc)

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())

        print()

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(
        time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))
    print()

    # load best model weights
    model.load_state_dict(best_model_wts)
    return loss_dict, acc_dict


def embedding_model(model, data_loaders, datasets_size):
    if USE_GPU:
        model = model.cuda()

    criterion_ft = nn.CrossEntropyLoss()

    # Observe that all parameters are being optimized
    optimizer_ft = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)

    loss, acc = train_model(model, data_loaders, datasets_size, criterion_ft,
                            optimizer_ft, exp_lr_scheduler, num_epochs=EMBEDDING_EPOCH)

    return loss, acc
